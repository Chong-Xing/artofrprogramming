##---------------------------------------##
## Matloff Chapter 02 Questions: Vectors ##
##---------------------------------------##

## Question 01 (Multiple-Choice)

Using the following code, a four-element vector x1 was created first, then a second vector x2 was created. What are the elements in x2?

> x1 <- c(4, 5, 6, 7)
> x2 <- c(x1[1:2], 7, x1[3:4])

A. 4 5 7 6 6
B. 4 5 7 7 6
C. 4 5 6 7 7
D. 4 5 7 6 7


## Question 02 (Multiple-Choice)

What is the outcome of the following code?

> x <- c(1, 5, 7, 9)
> length(x)

A. 9 7 5 1
B. 4
C. 1
D. 1 5 7 9


## Question 03 (True/False)

Arrays and matrices are vectors with extra class attributes.


## Question 04 (Multiple-Choice)

Which one of the following codes will NOT produce a two-element vector y which contains 3 and 4?

A. > y <- c(3, 4)

B. > y[1] <- 3
   > y[2] <- 4

C. > y <- vector(length = 2)
   > y[1] <- 3
   > y[2] <- 4

D. > y <- 3:4


## Question 05 (Multiple-Choice)

What is the outcome of the following vector operation?

> c(1, 1) + c(2, 2, 2)

A. [1] 3 3 2
B. [1] 3 3 3
C. [1] 3 3 2 1
D. [1] 2 2 3


## Question 06 (Multiple-Choice)

What is the outcome of the following vector operation?

> c(2, 2) * c(3, 3, 3)

A. [1] 6 6 3
B. [1] 6 6 2
C. [1] 6 6 6
D. [1] 6 6


## Question 07 (Multiple-Choice)

What is the outcome of the following execution?

y <- c(12, 13, 14, 15, 16)
y[c(4, 2, 1, 3)]

A. [1] 15 13 12 14
B. [1] 13 15 14 12
C. [1] 12 14 15 16
D. [1] 13 14 15 15


## Question 08 (Multiple-Choice)

Following code was used to create a vector x. What elements does x contain?

> x <- seq(from = 10, to = 40, by = 10)

A. [1] 40 30 20 10
B. [1] 10 40
C. [1] 10 10 40 40
D. [1] 10 20 30 40


## Question 09 (Multiple-Choice)

What is the outcome of the following code?

> x <- 1:7
> all(x > 1)

A. [1] TRUE
B. [1] FALSE
C. [1] 2 3 4 5 6 7
D. [1] 1 2 3 4 5 6 7


## Question 10 (True/False)

Missing data are represented with the value NULL in R.


## Question 11 (Multiple-Choice)

What is the outcome of the following code?

> x <- c(1, 2, 3, 4)
> y <- x[x < 4]
> y

A. [1] 3 2 1
B. [1] 1 2 3
C. [1] 1 2 3 4
D. [1] 4 3 2 1


## Question 12 (True/False)

To test whether two vectors, x and y, are equal, we can use == function.


## Question 13 (Multiple-Choice)

What is the outcome of the following code?

> x <- c(1, 2, "a", "b")
> x

A. [1] 1 2 a b
B. [1] 1 2 "a" "b"
C. [1] "1 2 a b"
D. [1] "1" "2" "a" "b"


## Question 14 (R exercise; pp. 35-37)

An R function, findOddRuns(), was created using the following code. This function can find runs of consecutive odd numbers in vectors containing integers.

findOddRuns <- function(x, k) {
    n <- length(x)
    runs <- NULL
    for (i in 1:(n - k + 1)) {
        if (all(x[i:(i + k -1)] %% 2 == 1)) runs <- c(runs, i)
    }
    return(runs)
}

Step 1: Run the above code in R to create the function.

Step 2: Use c() to create a vector j containing some integers (suggetion - try to create different number of runs of consecutive odd numbers). For instance,

j <- c(1, 2, 3, 5, 6, 7, 9, 11, 12)

Step 3: Apply findOddRuns() to j and check the result. Did the function work?

Step 4: What can be a potential limitation of the function? Can you improve findOddRuns() by modifying it?
